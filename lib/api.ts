/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/test_error": {
    /** Test Error */
    get: operations["_test_error_api_test_error_get"];
  };
  "/api/discord/login": {
    /**
     * Discord Oauth Login 
     * @description DiscordのOAuthのウェブページにリダイレクトさせます。
     * ログイン後クッキーに二つのTOKENが保存される。
     * 一つは`discord_access_token`で、JSON形式の[これ](https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-access-token-response)が入る。
     * もう一つは`token`で、RTの設定更新等のAPIのリクエストに必要となる予定。
     * なお、ログイン後は自動で`/`にリダイレクトされ、リダイレクト後のURLにパラメータで以下の内容が渡される。
     * ```
     * user_id     ユーザーID
     * user_name   ユーザー名
     * user_avatar ユーザーのアバターのハッシュ値
     * ```
     * また、このエンドポイントは`redirect_path`というパラメータを受け取ることができ、これはログイン後のリダイレクト先のパスを指定するためのもので、リダイレクト先を変更したい際に使う。(例：`/dashboard`)
     * ただ、リダイレクト先は`routers/login.py`の`ALLOWED_REDIRECT_PATHS`という定数のタプルに含まれているパスで限定される。(悪用やDDos時にURLを量産するといったことがないように。)
     */
    get: operations["discord_oauth_login_api_discord_login_get"];
  };
  "/api/discord/callback": {
    /**
     * Discord Oauth Callback 
     * @description クッキーにOAuthで手に入れたDiscordのTOKENとダッシュボード操作用のTOKENを入れます。
     */
    get: operations["discord_oauth_callback_api_discord_callback_get"];
  };
  "/api/discord/me": {
    /**
     * Get User Id 
     * @description 指定されたTOKENのユーザーIDを取得します。
     */
    get: operations["get_user_id_api_discord_me_get"];
  };
  "/api/shards/connections": {
    /**
     * Connections 
     * @description 接続しているクライアントのIDのリストを返します。
     */
    get: operations["connections_api_shards_connections_get"];
  };
  "/api/shards/": {
    /**
     * Acquire 
     * @description シャードIDを獲得します。
     */
    get: operations["acquire_api_shards__get"];
    /**
     * Heartbeat 
     * @description シャードが生きていることを通知するためのエンドポイントです。
     * シャード獲得後は30秒以内づつこのエンドポイントを叩く必要があります。
     */
    put: operations["heartbeat_api_shards__put"];
    /**
     * Release 
     * @description シャードを解放します。
     */
    delete: operations["release_api_shards__delete"];
  };
  "/api/status/": {
    /**
     * Get Status 
     * @description サーバーの稼働状況を返します。
     */
    get: operations["get_status_api_status__get"];
  };
  "/api/dashboard/guild/{guild_id}/roles": {
    /**
     * Get Guild Roles 
     * @description サーバーにあるロールを全て取得します。
     */
    get: operations["get_guild_roles_api_dashboard_guild__guild_id__roles_get"];
  };
  "/api/dashboard/guild/{guild_id}/channels": {
    /** Get Guild Channels */
    get: operations["get_guild_channels_api_dashboard_guild__guild_id__channels_get"];
  };
  "/api/dashboard/guild/{guild_id}/members": {
    /** Get Guild Members */
    get: operations["get_guild_members_api_dashboard_guild__guild_id__members_get"];
  };
  "/api/dashboard/rt/language/": {
    /**
     * Get Language 
     * @description 言語を取得します。
     */
    get: operations["get_language_api_dashboard_rt_language__get"];
    /**
     * Set Language 
     * @description 言語を設定します。
     */
    put: operations["set_language_api_dashboard_rt_language__put"];
  };
  "/api/dashboard/server_management/captcha/": {
    /**
     * Get Data 
     * @description 認証設定を読み込みます。もし存在しない場合は何も帰ってきません。
     */
    get: operations["get_data_api_dashboard_server_management_captcha__get"];
    /**
     * Set Data 
     * @description 認証の設定します。
     */
    put: operations["set_data_api_dashboard_server_management_captcha__put"];
    /**
     * Make Panel 
     * @description 認証開始ボタンのついたメッセージを作ります。
     * 管理者権限が必要です。
     */
    post: operations["make_panel_api_dashboard_server_management_captcha__post"];
    /**
     * Delete Data 
     * @description 認証設定を消します。
     */
    delete: operations["delete_data_api_dashboard_server_management_captcha__delete"];
  };
  "/api/payments/webhook": {
    /**
     * Stripe Webhook 
     * @description Stripeからのイベントを受け取るためのエンドポイントです。
     * 当たり前ですがStripeからのリクエストしか受け付けません。
     */
    post: operations["stripe_webhook_api_payments_webhook_post"];
  };
  "/api/payments/link/{user_id}/{guild_id}/{period}": {
    /**
     * Get Payment Link 
     * @description RTプラスの購入リンクにリダイレクトさせます。
     */
    get: operations["get_payment_link_api_payments_link__user_id___guild_id___period__get"];
  };
  "/api/captcha/": {
    /**
     * Check Captcha Result 
     * @description 認証結果を取得します。
     * 認証データが渡されていれば、その認証データを元に認証をした人にロールを付与します。
     * Turnstileにも念の為対応していますが、動作確認はしっかりしていません。
     */
    post: operations["check_captcha_result_api_captcha__post"];
  };
  "/api/captcha/test": {
    /**
     * Test Page 
     * @description Captchaテスト用
     */
    get: operations["test_page_api_captcha_test_get"];
  };
  "/api/ping": {
    /** Ping Pong */
    get: operations["ping_pong_api_ping_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * AllStatistics 
     * @description 全ての集計です。
     */
    AllStatistics: {
      /**
       * Bot 
       * @description Botの動作状況です。
       */
      bot: {
        [key: string]: components["schemas"]["BotStatistics"] | undefined;
      };
      /**
       * Backend 
       * @description バックエンドの動作状況です。
       */
      backend: {
        [key: string]: components["schemas"]["PerformanceStatistics"] | undefined;
      };
    };
    /**
     * BaseShardsData 
     * @description シャードの最低限のデータを格納するためのクラスです。
     */
    BaseShardsData: {
      /** Channel */
      channel: string;
      /** Signature */
      signature: string;
    };
    /** Body_check_captcha_result_api_captcha__post */
    Body_check_captcha_result_api_captcha__post: {
      /** H-Captcha-Response */
      "h-captcha-response"?: string;
      /** Cf-Turnstile-Response */
      "cf-turnstile-response"?: string;
    };
    /**
     * BotStatistics 
     * @description Botの集計を格納するためのクラスです。
     */
    BotStatistics: {
      /**
       * Main 
       * @description 集計です。
       */
      main: (components["schemas"]["Statistics"])[];
      /**
       * Count 
       * @description Botが接続するシャードの個数です。 
       * @example 3
       */
      count: number;
    };
    /**
     * CaptchaData 
     * @description セーブデータを格納するためのクラスです。
     */
    CaptchaData: {
      /** Guild Id */
      guild_id: string;
      /** Role Id */
      role_id: string;
      /**
       * Mode 
       * @enum {string}
       */
      mode: "image" | "word" | "web" | "oneclick";
      /** Lifetime */
      lifetime: number;
      /** Extras */
      extras: Record<string, never>;
    };
    /**
     * Channel 
     * @description チャンネルのデータのクラスです。
     */
    Channel: {
      /** Name */
      name: string;
      /** Type */
      type: string;
    };
    /**
     * DiscordStatistics 
     * @description Discordの情報での稼働状況を格納するためのクラスです。
     */
    DiscordStatistics: {
      /**
       * Guild 
       * @description サーバー数 
       * @default 0 
       * @example 840
       */
      guild?: number;
      /**
       * User 
       * @description ユーザー数 
       * @default 0 
       * @example 73574
       */
      user?: number;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /**
     * PerformanceStatistics 
     * @description パフォーマンス面での稼働状況を格納するためのクラスです。
     */
    PerformanceStatistics: {
      /**
       * Cpu 
       * @description CPU使用率 
       * @default 0 
       * @example 7.5
       */
      cpu?: number;
      /**
       * Memory 
       * @description メモリ使用量と未使用量、そして合計の三つが格納されたリスト 
       * @default [
       *   0,
       *   0,
       *   0
       * ] 
       * @example [
       *   5760122880,
       *   11521396736,
       *   33559912448
       * ]
       */
      memory?: (number)[];
      /**
       * Task Amount 
       * @description 非同期イベントループのタスク数 
       * @default 0 
       * @example 23
       */
      task_amount?: number;
      /**
       * Database Pool Size 
       * @description データベースのプールの接続数です。 
       * @default 0 
       * @example 17
       */
      database_pool_size?: number;
    };
    /**
     * Role 
     * @description ロールのデータのクラスです。
     */
    Role: {
      /** Name */
      name: string;
      /** Icon Url */
      icon_url?: string;
      /** Color */
      color: number;
    };
    /**
     * ShardsData 
     * @description シャードのデータを格納するためのクラスです。
     */
    ShardsData: {
      /** Channel */
      channel: string;
      /** Signature */
      signature: string;
      /** Shard Ids */
      shard_ids: (number)[];
    };
    /**
     * Statistics 
     * @description 稼働状況の集計を格納するためのクラスです。
     */
    Statistics: {
      /**
       * Discord 
       * @description Discordの情報での稼働状況 
       * @default {
       *   "guild": 0,
       *   "user": 0
       * }
       */
      discord?: components["schemas"]["DiscordStatistics"];
      /**
       * Performance 
       * @description パフォーマンス面での稼働状況 
       * @default {
       *   "cpu": 0,
       *   "memory": [
       *     0,
       *     0,
       *     0
       *   ],
       *   "task_amount": 0,
       *   "database_pool_size": 0
       * }
       */
      performance?: components["schemas"]["PerformanceStatistics"];
      /**
       * Shard Ids 
       * @description シャードIDとレイテンシ 
       * @example {
       *   "0": 0.1664976980537176,
       *   "1": 0.17617885721847415,
       *   "2": 0.17448654817417264
       * }
       */
      shard_ids: {
        [key: string]: number | undefined;
      };
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  _test_error_api_test_error_get: {
    /** Test Error */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": null;
        };
      };
    };
  };
  discord_oauth_login_api_discord_login_get: {
    /**
     * Discord Oauth Login 
     * @description DiscordのOAuthのウェブページにリダイレクトさせます。
     * ログイン後クッキーに二つのTOKENが保存される。
     * 一つは`discord_access_token`で、JSON形式の[これ](https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-access-token-response)が入る。
     * もう一つは`token`で、RTの設定更新等のAPIのリクエストに必要となる予定。
     * なお、ログイン後は自動で`/`にリダイレクトされ、リダイレクト後のURLにパラメータで以下の内容が渡される。
     * ```
     * user_id     ユーザーID
     * user_name   ユーザー名
     * user_avatar ユーザーのアバターのハッシュ値
     * ```
     * また、このエンドポイントは`redirect_path`というパラメータを受け取ることができ、これはログイン後のリダイレクト先のパスを指定するためのもので、リダイレクト先を変更したい際に使う。(例：`/dashboard`)
     * ただ、リダイレクト先は`routers/login.py`の`ALLOWED_REDIRECT_PATHS`という定数のタプルに含まれているパスで限定される。(悪用やDDos時にURLを量産するといったことがないように。)
     */
    parameters?: {
      query?: {
        redirect_path?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      307: never;
      /** @description リダイレクト先が有効ではないときに発生します。 */
      400: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  discord_oauth_callback_api_discord_callback_get: {
    /**
     * Discord Oauth Callback 
     * @description クッキーにOAuthで手に入れたDiscordのTOKENとダッシュボード操作用のTOKENを入れます。
     */
    parameters: {
      query: {
        code: string;
        state: string;
      };
      cookie?: {
        redirect_path?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      307: never;
      /** @description 放置された際に発生します。CSRF対策のためです。 */
      400: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_user_id_api_discord_me_get: {
    /**
     * Get User Id 
     * @description 指定されたTOKENのユーザーIDを取得します。
     */
    parameters?: {
      cookie?: {
        token?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  connections_api_shards_connections_get: {
    /**
     * Connections 
     * @description 接続しているクライアントのIDのリストを返します。
     */
    parameters?: {
      header?: {
        authorization?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  acquire_api_shards__get: {
    /**
     * Acquire 
     * @description シャードIDを獲得します。
     */
    parameters: {
      query: {
        channel_prefix: string;
        count: number;
      };
      header?: {
        authorization?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ShardsData"];
        };
      };
      /** @description 指定された個数のシャードを確保できなかった際に発生します。 */
      400: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description シャード管理の準備がまだできていない場合に発生します。 */
      503: never;
    };
  };
  heartbeat_api_shards__put: {
    /**
     * Heartbeat 
     * @description シャードが生きていることを通知するためのエンドポイントです。
     * シャード獲得後は30秒以内づつこのエンドポイントを叩く必要があります。
     */
    parameters?: {
      header?: {
        authorization?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaseShardsData"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Botチャンネルが無効な場合発生します。 */
      400: never;
      /** @description 署名が無効または扱われていないものである場合に発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description シャード管理の準備がまだできていない場合に発生します。 */
      503: never;
    };
  };
  release_api_shards__delete: {
    /**
     * Release 
     * @description シャードを解放します。
     */
    parameters?: {
      header?: {
        authorization?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaseShardsData"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Botチャンネルが無効な場合発生します。 */
      400: never;
      /** @description 署名が無効または扱われていないものである場合に発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description シャード管理の準備がまだできていない場合に発生します。 */
      503: never;
    };
  };
  get_status_api_status__get: {
    /**
     * Get Status 
     * @description サーバーの稼働状況を返します。
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AllStatistics"];
        };
      };
      /** @description まだ準備ができていない場合に発生します。 */
      503: never;
    };
  };
  get_guild_roles_api_dashboard_guild__guild_id__roles_get: {
    /**
     * Get Guild Roles 
     * @description サーバーにあるロールを全て取得します。
     */
    parameters: {
      header?: {
        authorization?: string;
      };
      path: {
        guild_id: number;
      };
      cookie?: {
        token?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["Role"] | undefined;
          };
        };
      };
      /** @description ログインしていないまたはTOKENがおかしい場合に発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Botと通信できなかった際に発生します。場合によっては指定されたサーバーIDを見れるシャードが見つからなかった際にも発生します。 */
      503: never;
    };
  };
  get_guild_channels_api_dashboard_guild__guild_id__channels_get: {
    /** Get Guild Channels */
    parameters: {
        /** @description チャンネルの種類です。空の場合は全てとなります。とり得る値は`Channel.type`がとり得る値です。 */
      query?: {
        type?: string;
      };
      header?: {
        authorization?: string;
      };
      path: {
        guild_id: number;
      };
      cookie?: {
        token?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["Channel"] | undefined;
          };
        };
      };
      /** @description ログインしていないまたはTOKENがおかしい場合に発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Botと通信できなかった際に発生します。場合によっては指定されたサーバーIDを見れるシャードが見つからなかった際にも発生します。 */
      503: never;
    };
  };
  get_guild_members_api_dashboard_guild__guild_id__members_get: {
    /** Get Guild Members */
    parameters: {
        /** @description 読み込み始める位置です。 */
        /** @description 取得するメンバーが持っている必要のあるロールで、検索に使えます。 */
        /** @description 検索ワードです。名前に含まれるまたはIDと同じかどうか検索されます。 */
      query: {
        offset: number;
        role_id?: number;
        search_text?: string;
      };
      header?: {
        authorization?: string;
      };
      path: {
        guild_id: number;
      };
      cookie?: {
        token?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
      /** @description ログインしていないまたはTOKENがおかしい場合に発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Botと通信できなかった際に発生します。場合によっては指定されたサーバーIDを見れるシャードが見つからなかった際にも発生します。 */
      503: never;
    };
  };
  get_language_api_dashboard_rt_language__get: {
    /**
     * Get Language 
     * @description 言語を取得します。
     */
    parameters: {
      query: {
        target: "user" | "guild";
        id: number;
      };
      header?: {
        authorization?: string;
      };
      cookie?: {
        token?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description ログインしていないまたはTOKENがおかしい場合に発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  set_language_api_dashboard_rt_language__put: {
    /**
     * Set Language 
     * @description 言語を設定します。
     */
    parameters: {
      query: {
        target: "user" | "guild";
        id: number;
        code: string;
      };
      header?: {
        authorization?: string;
      };
      cookie?: {
        token?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": null;
        };
      };
      /** @description 言語コードがおかしい際に発生します。 */
      400: never;
      /** @description ログインしていないまたはTOKENがおかしい場合に発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_data_api_dashboard_server_management_captcha__get: {
    /**
     * Get Data 
     * @description 認証設定を読み込みます。もし存在しない場合は何も帰ってきません。
     */
    parameters: {
      query: {
        guild_id: number;
      };
      header?: {
        authorization?: string;
      };
      cookie?: {
        token?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CaptchaData"];
        };
      };
      /** @description ログインしていないまたはTOKENがおかしい場合に発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Botと通信できなかった際に発生します。場合によっては指定されたサーバーIDを見れるシャードが見つからなかった際にも発生します。 */
      503: never;
    };
  };
  set_data_api_dashboard_server_management_captcha__put: {
    /**
     * Set Data 
     * @description 認証の設定します。
     */
    parameters?: {
      header?: {
        authorization?: string;
      };
      cookie?: {
        token?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CaptchaData"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description ライフタイムがゼロ秒以上かつ三時間以内でないときに発生します。 */
      400: never;
      /** @description ログインしていないまたはTOKENがおかしい場合に発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Botと通信できなかった際に発生します。場合によっては指定されたサーバーIDを見れるシャードが見つからなかった際にも発生します。 */
      503: never;
    };
  };
  make_panel_api_dashboard_server_management_captcha__post: {
    /**
     * Make Panel 
     * @description 認証開始ボタンのついたメッセージを作ります。
     * 管理者権限が必要です。
     */
    parameters: {
      query: {
        channel_id: number;
        guild_id: number;
      };
      header?: {
        authorization?: string;
      };
      cookie?: {
        token?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description ログインしていないまたはTOKENがおかしい場合に発生します。 */
      403: never;
      /** @description BotがDiscordで権限を持っていないため実行ができなかった場合、`type`は`discord`でこれが発生します。 */
      422: never;
      /** @description Botと通信できなかった際に発生します。場合によっては指定されたサーバーIDを見れるシャードが見つからなかった際にも発生します。 */
      503: never;
    };
  };
  delete_data_api_dashboard_server_management_captcha__delete: {
    /**
     * Delete Data 
     * @description 認証設定を消します。
     */
    parameters: {
      query: {
        guild_id: number;
      };
      header?: {
        authorization?: string;
      };
      cookie?: {
        token?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description ログインしていないまたはTOKENがおかしい場合に発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Botと通信できなかった際に発生します。場合によっては指定されたサーバーIDを見れるシャードが見つからなかった際にも発生します。 */
      503: never;
    };
  };
  stripe_webhook_api_payments_webhook_post: {
    /**
     * Stripe Webhook 
     * @description Stripeからのイベントを受け取るためのエンドポイントです。
     * 当たり前ですがStripeからのリクエストしか受け付けません。
     */
    parameters: {
      header: {
        "stripe-signature": string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description 許可されていないIPであったまたは認証に失敗したときに発生します。 */
      403: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_payment_link_api_payments_link__user_id___guild_id___period__get: {
    /**
     * Get Payment Link 
     * @description RTプラスの購入リンクにリダイレクトさせます。
     */
    parameters: {
      path: {
        user_id: number;
        guild_id: number;
        period: "monthly" | "yearly";
      };
    };
    responses: {
      /** @description Successful Response */
      307: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  check_captcha_result_api_captcha__post: {
    /**
     * Check Captcha Result 
     * @description 認証結果を取得します。
     * 認証データが渡されていれば、その認証データを元に認証をした人にロールを付与します。
     * Turnstileにも念の為対応していますが、動作確認はしっかりしていません。
     */
    parameters?: {
        /** @description 認証ページにRTからクエリパラメータ`data`で渡された認証データを入れるべきパラメータです。ただCaptchaの結果だけが欲しいのならこの値は空で構いませんが、認証機能の認証をした後の場合はこれがなければロールが付与されません。 */
      query?: {
        data?: string;
      };
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_check_captcha_result_api_captcha__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** @description レスポンスデータを渡さなかった際に発生します。 */
      400: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Botが準備できていない際に発生します。 */
      503: never;
    };
  };
  test_page_api_captcha_test_get: {
    /**
     * Test Page 
     * @description Captchaテスト用
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  ping_pong_api_ping_get: {
    /** Ping Pong */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
}
